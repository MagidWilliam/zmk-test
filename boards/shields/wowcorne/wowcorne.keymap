/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <behaviors/mouse_keys.dtsi>


#define WIN 0
#define MAC 1
#define NAV 2
#define SYM 3
#define FN 4
#define CFG 5
#define MSE 6

//universial keycodes

#define L_SYM &mo SYM
#define L_FN  &mo FN
#define L_CFG &mo CFG
#define L_NAV &mo NAV
#define L_MSE &mo MSE
#define TAB_C &kp LC(TAB)
#define LT_SPACE &lt MSE SPACE

// winos keycodes
#define WHF &hm LCTRL F
#define WHD &hm LALT D
#define WHJ &hm RCTRL J
#define WHK &hm RALT K
#define LANGW &mt RSHFT RALT
#define ESCW &mt LGUI ESC


// macos keycodes
#define MHF &hm LGUI F
#define MHD &hm LALT D
#define MHJ &hm RGUI J
#define MHK &hm RALT K
#define OBS &hm LA(LSFT) A
#define OBS_C &hm LC(LA(LSFT)) A
#define LANGM &mt RALT LC(SPACE)
#define ESCM &mt LCTRL ESC


&mt {
    tapping-term-ms = <125>;
};
/ {
     behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
 };

   combos {
        compatible = "zmk,combos";

        a-ad {
            bindings = <&kp LEFT_WIN>;
            key-positions = <36 37>;
        };

        a-zk {
            bindings = <&kp B>;
            key-positions = <30 31>;
        };

        a-zew {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <9 8>;
        };

        a-zklw {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <10 9>;
        };

        z-dkf {
            bindings = <&kp C_VOLUME_UP>;
            key-positions = <6 18>;
        };

        z-dkfj {
            bindings = <&kp C_VOLUME_DOWN>;
            key-positions = <18 30>;
        };

        z-dkfjgd {
            bindings = <&kp C_BRI_UP>;
            key-positions = <7 19>;
        };

        z-dkfjgfg {
            bindings = <&kp C_BRIGHTNESS_DEC>;
            key-positions = <19 31>;
        };

        z-kdjfk {
            bindings = <&kp LC(LS(TAB))>;
            key-positions = <13 1>;
        };

        z-dsflkl {
            bindings = <&kp LC(TAB)>;
            key-positions = <14 2>;
        };

        s-sdfkfl {
            bindings = <&kp LC(W)>;
            key-positions = <1 2>;
        };

        z-sdflkfkfg {
            bindings = <&kp LC(T)>;
            key-positions = <4 5>;
        };

        z-dkfkfj {
            bindings = <&kp K_BACK>;
            key-positions = <25 13>;
        };

        z-kdfjg {
            bindings = <&kp K_FORWARD>;
            key-positions = <27 15>;
        };

        z-dkfjg {
            bindings = <&kp SQT>;
            key-positions = <35 23>;
        };

        dkdjf {
            bindings = <&kp LA(LEFT)>;
            key-positions = <2 3>;
        };

        kfdjgk {
            bindings = <&kp LA(RIGHT)>;
            key-positions = <3 4>;
        };

        exit {
            bindings = <&kp LA(F4)>;
            key-positions = <0 11>;
        };

        amfruf {
            bindings = <&kp TILDE>;
            key-positions = <0 1>;
        };
    };

    behaviors {
        new_behavior: new_behavior {
            compatible = "zmk,behavior-mouse-key-press";
            label = "NEW_BEHAVIOR";
            #binding-cells = <1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  ESC |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | TAB  |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  | ENTER|
            // | LCTRL|  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | RSHFT|
            //                    |LCTRL| LALT| SP |   | SPACE | RSE  | RALT |

            bindings = <
&kp ESCAPE  &kp Q  &kp W  &kp E      &kp R         &kp T    &kp Y      &kp U            &kp I       &kp O    &kp P     &kp BSPC
&kp TAB     &kp A  &kp S  &kp D      &kp F         &kp G    &kp H      &kp J            &kp K       &kp L    &kp SEMI  &kp ENTER
&kp LSHFT   &kp Z  &kp X  &kp C      &kp V         &kp B    &kp N      &kp M            &kp COMMA   &kp DOT  &kp FSLH  &kp RSHFT
                          &kp LCTRL  &kp LEFT_ALT  &mo 1    &kp SPACE  &lt 2 RIGHT_ALT  &lt 2 RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE  &kp F2         &kp F5         &mkp MB2        &msc SCRL_UP    &mkp LCLK          &kp N7        &kp N8        &kp N9        &kp A           &kp EXCLAMATION  &kp BSPC
&kp CAPS    &kp LC(L)      &kp LA(LEFT)   &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_RIGHT    &kp NUMBER_4  &kp N5        &kp NUMBER_6  &mkp MB1        &mmv MOVE_UP     &kp ENTER
&kp LSHFT   &kp LC(LS(T))  &kp LA(RIGHT)  &kp LC(N0)      &kp LC(MINUS)   &kp LC(EQUAL)      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &mmv MOVE_LEFT  &mmv MOVE_DOWN   &mmv MOVE_RIGHT
                                          &kp LCTRL       &kp LEFT_ALT    &kp SPACE          &kp N0        &kp DOT       &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE  &kp EXCL     &kp AT        &kp LG(LS(S))         &kp LG(TAB)            &kp LG(D)    &kp F2                 &kp F5           &kp F7     &kp PAGE_UP    &kp LC(F10)   &kp BSPC
&kp LCTRL   &kp SQT      &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp MINUS    &kp LC(RIGHT_BRACKET)  &kp LC(LS(TAB))  &kp LC(V)  &kp PAGE_DOWN  &kp UP_ARROW  &kp KP_ENTER
&kp LSHFT   &kp RS(SQT)  &kp PERCENT   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp EQUAL    &kp LC(LEFT_BRACKET)   &kp LA(C)        &kp LC(C)  &kp LEFT       &kp DOWN      &kp RIGHT_ARROW
                                       &kp LCTRL             &kp LEFT_ALT           &kp SPACE    &kp SPACE              &trans           &kp RALT
            >;
        };
    };
};
